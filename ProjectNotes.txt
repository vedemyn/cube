musste auf x64 umschalten
TODO: nsight installieren
glm includes alles in cpp, spezifische in hpp
opengl = column major
 = im body von der glm mat4 erst spalten, dann darunter zeilen
kameratransformation
hilfsfunktion die eine kameratr. matrix erstellt: 
	glm::lookAt(__kameralinse__, __punkt_zum_anschauen__, __up_vector__)
danach noch eine perspektivische transformation
	glm::perspective(__fov_radians__, __aspect_ratio__, __near_plane__, __far_plane__)
		Das aber dann mit der lookat transformation multiplizieren


bei implementation von modell
3x3x3 array
rotation an den achsen entlang shchauned

indizierte strukturen vs nicht indizierte? vertex weglassen?
VBO = vertex buffer object
	= arrays wo die positionen drinstehen
VBA = vertex buffer arrays
	komische namensgebung
	wie sind die einzelnen daten die pro vertex 
	definiert sind den registern im vertex shader zugeordnet

VBA und VBO laufen in vertex shader
vertex shader wird nicht mit cpp compiliert, 
	ist text file die reingeladen wird und runtime compiliert wird

uniform data = daten bei denen fur alle vertices der zeichenbefehl der gleiche ist
	zb transformationsmatrix
	lauft auch in vertex shader rein

resultat von vshader lauft in rasterizer (den wir nicht programmieren mussen)

dann in den fragment shader (den wir wieder programmieren mussen)
hier kann auch noch uniform data reinlaufen

heute schreiben wir einfache vertex und fragment shader
kleines rahmenprogramm mit dem man die beiden shader ladt und kompiliert und fehler zeigt

shader schreiben: zuerst versionsnummer




maussteuerung:
erst screen koordinaten in clip space coordinaten umrechnen


todo:

X color different sides differently
X check if model works correctly (text output)
X write code to rotate different slices in graphical representation (keine animation)
X animation der rotationen

get mouse input
logic for rotating cube depending on mouse input
logic for rotation slices on mouse input
add sounds
textures??? = (base texture plus coloring?)



write code to randomize cube


int axis = (m_currentlyRotatedSlice / 3) == 0 ? i : (m_currentlyRotatedSlice / 3) == 1 ? j : k